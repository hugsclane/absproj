---
import {Button,Collapsible} from 'webcoreui/astro';
import DataC from "./DataC.svelte";


---

<aside class="form">
<style>
ul {
  list-style-type: none;
  padding: unset;
  position: relative;
}
</style>
      <div>
        <label for="search"> Search dataflowid</label>
        <span>Enter a search term to search the dataflowid field</span>
      </div>
      <input
          type="search"
          required
          min="2"
          max="24"
          value=""
          name="search"
          id="search"
          placeholder="Enter a search term"
          />
    <p id="searchReadout"></p>
    <section aria-label="Search Results">
      <ul id="searchResults"></ul>

    </section>
  </aside>

<script >
  import {afterUpdate, mount, unmount} from "svelte";
  import CollapsibleSection from "./CollapsibleSection.svelte";
  import DataC from "./DataC.svelte";
  import DOMPurify from "dompurify";
  import Fuse from "fuse.js";
  const SPINNER =`
  <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
    <style>
    .spinner_ajPY{transform-origin:center;animation:spinner_AtaB
    .75s infinite linear}@keyframes spinner_AtaB{100%{transform:rotate(360deg)}}
    </style>
    <path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z" opacity=".25"/>
    <path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0 ,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z" class="spinner_ajPY"/>
  </svg>`

  let SEARCH_DATA;
  let FUSE_INSTANCE;
  const FUSE_OPTIONS ={

  inclueScore: true,
  shouldSort: true,
  threshold: 0.6,
  keys: [
      {
        name : "id",
        weight: 1,
      },
      {
        name : "description",
        weight: 0.7,
      },
      {
        name: "name",
        weight:1,
      }
    ]
  }


    const form = document.querySelector("form");
    const search = document.querySelector("#search");
    const searchReadout = document.querySelector("#searchReadout");
    const resultsList = document.querySelector("#searchResults");

    async function fetchSearchResults(search){

      resultsList.innerHTML = "";
      if (search.length === 0){
        const delElement = document.getElementsByClassName("temp");
        delElement.remove();

      return
      };

      if (!SEARCH_DATA) {
        try{
        const res = await fetch("/search.json");
          if (!res.ok){
              throw new Error("Something went wrong... please try again");
            }
            const data = await res.json();
            SEARCH_DATA = data;
          }
          catch(e)
          {
            console.error(e);
          }
          }
      if (SEARCH_DATA && !FUSE_INSTANCE){
      FUSE_INSTANCE = new Fuse(SEARCH_DATA,FUSE_OPTIONS);
      }
      if(!FUSE_INSTANCE) return;
      const searchResult = FUSE_INSTANCE.search(search);

      // console.log(search,": fetchSearchResults ~ data:", searchResult);
      // console.log(search,": fetchSearchResults ~ data:", resultsList);
      if (searchResult.length > 0) {
         generateSearchList(searchResult)
        }else{
        return "No results found";
        }
        }
      // resultsList.innerHTML =

      // searchResult.length > 0 ? generateSearchList(searchResult) :
      // "No results found"
    // }


    function generateSearchList(results){
      const fragment = document.createDocumentFragment();


      results.map((r) => {
      const id = r.item.id;
      const name = r.item.data.name;
      const description = r.item.data.description;

      const resultContainer = document.createElement("li");
      resultContainer.className = "searchlist";
      mount(DataC,{ target:resultContainer,
      props: {name : `${name}`, description : `${description}`
      }})

      // resultContainer.innerHTML = `
      // <svelte:component this={DataC} name="${name}" description=${description}/>
      // `;

      // resultContainer.innerHTML = `
      // <svelte:component this={CollapsibleSection} headerText="${name}">
      // ${description}
      // </svelte:component>
      // `;

// resultContainer.innerHTML = `
//       <svelte:component this={CollapsibleSection} headerText="${name}"/>
//         ${description}
//       `;

      fragment.appendChild(resultContainer);
      })
      resultsList?.appendChild(fragment);
      console.log(search,": fetchSearchResults ~ data:", resultsList);
      }


    function updateDocumentTitle(search) {
      document.title = search ? `Search results for "${search}"` : "search abs stats";
    }
    function updateSearchReadout(search) {
      searchReadout.textContent = search ? `Search results for "${search}"` : "";
    }

    window.addEventListener("DOMContentLoaded", () =>
          {
            const urlParams =
            DOMPurify.sanitize(
            new URLSearchParams(window.location.search).get("q")
            );


          const delElement = document.getElementsByClassName("searchlist");
          delElement.remove();
          fetchSearchResults(urlParams);
          updateDocumentTitle(urlParams);
          updateSearchReadout(urlParams);
          search.value = urlParams;
          search.focus();
          }
          );

    search.addEventListener("input", () =>
    {
      const searchTerm =  DOMPurify.sanitize(search.value);

    updateDocumentTitle(searchTerm);
    updateSearchReadout(searchTerm);
    fetchSearchResults(searchTerm);
    });
</script>

<style type="form/css" media="screen">
  .form{
    display: grid;
    gap : 1rem;
  max-width: 32ch;
  border: 2px solid #222;
  border-radius: 0.5rem;
  padding: 1rem;
  }
  .form label {
    font-weight: bold;
    font-size: 2rem;
  }
  input{
    font:inherit;
  }
</style>
